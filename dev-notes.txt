RAMP 2024 allows EventListener in the MapInfo, but I'm pretty sure we're not allowed to modify GameInfo.

In any case, we can check if the event handlers we add get removed immediately on leaving our map via:
https://zdoom.org/wiki/Events_and_handlers

void OnUnregister () 	— 	Called when the engine removes your handler from the list.

void PlayerSpawned (PlayerEvent e)

bool InputProcess (InputEvent e) 
This event provides direct interface to the commonly used player input. You don't need any special steps in order to use it.

MouseX and MouseY are delta values (offsets from the last mouse position). These are internally used for player aiming.

KeyScan is the internal ASCII value of the pressed key while KeyChar is the real ASCII value of the pressed key. KeyString is a single-character string that contains KeyScan provided for convenience. Converting KeyChar to a string is not guaranteed to be the same as KeyString. Note that, while a bit counter-intuitive (for people unfamiliar with the console bind system), mouse buttons are considered keys for this event.
For example, a left mouse click is registered as KeyDown+InputEvent.Key_Mouse1.

Note: this is one of the few non-void methods in the event system. By returning true here you will block any processing of this event by the other event handlers if their Order is lower than the current EventHandler.
In case of InputEvent, returning true will also mean that the generic game input handler will NOT receive the event (player will be locked from moving).
Also, if you need to interact with the world upon receiving an event, you have to use EventHandler.SendNetworkEvent (see: networking). https://zdoom.org/wiki/Events_and_handlers#Networking

--

For RAMP, I don't think there's any way for me to actually run a script that interacts with anyone else's maps without directly writing lumps, which I'm sure is a no-no. So the best I can think of is if all of the characters leave, I should maybe hold the fade-out ending a little longer and display a message saying "You can now summon a new follower at any time with the console command SUMMON BMPERCIVAL" or something of that sort.

--

If I want to re-render the Perci sprites with more of a PS1 look https://blender.stackexchange.com/questions/208612/n64-style-vertex-shading-lighting-for-low-poly-models

--

Quick memo for if I do submit a HOLLOWROUND map this year: Consider having both kind of "Squeaker" class Beast Balloon enemies having a 1 in 100 chance of doing a jump 10 times stronger than they normally would (maybe only do this on indoors maps or with invisible walls so they don't go out of bounds.

--

I've been looking through the gzdoompk3 to figure out how to do custom variables and when I tried to copypaste and change the names to my own variables or swap around the order of the new Property Name and the backing variable name, it didn't work. Spent almost 30 minutes alternating between trying things and searching the wiki. Through a stroke of luck and searching the web, finally managed to hit on https://zdoom.org/wiki/ZScript_custom_properties which was annoyingly hard to find.

"Inside the Default block, for the main actor class or any inheriting class: <NameOfBaseClass>.PropertyName <LocalVar1>, <LocalVar2>, ..."
That's it. That's the simple secret sauce I was missing. NameOfBaseClass.
--

I could use A_RadiusThrust to make a gravity weapon...
--

Species string

    Defines the species the monster belongs to. This determines infighting behavior, since a monster's missile do not inflict harm (except through splash damage) to other monsters belonging to the same species by default.
    When used with keys, this property allows for new keys to open the same locks as the keys they are referencing with the property, without the need to redefine the locks to add the new keys. For example, setting the key's species to RedCard will allow it to open locks as if it were a red keycard.
    Default is None that makes the game to look up the actor this actor inherits from and has this property set to something else.

--
Got an idea. StaticEventListeners are initialized at engine start and destroyed when the engine closes. If I can still use it in my MapInfo, that may be my way to pass Follower info around without CVars or weird hackery.
--

I can potentially pull some stuff from https://github.com/ZDoom/gzdoom/blob/master/wadsrc/static/zscript/actors/player/player.zs#L13 like:

override void Tick()
	{
		if (player != NULL && player.mo == self && CanCrouch() && player.playerstate != PST_DEAD)
		{
			Height = FullHeight * player.crouchfactor;
		}

--

Stepping through DiscoCat's UDB build guide. I'm using Pop! OS instead of Linux Mint. I got mono-complete installed from stuff I had done earlier, but I don't have cmake and I'm not sure if I have msbuild.
--

Oh OK I see cmake in the app store, grabbing that.

--

Oh. Duh. I should have started with following the UDB linux build instructions before building acc and the node thingy. Fortunately, both of those work fine. https://github.com/UltimateDoomBuilder/UltimateDoomBuilder Let's get that built first.
--

"Install Mono. The `mono-complete` package from the Debian repo doesn't include `msbuild`, so you have to install `mono-complete` by following the instructions on the Mono project's website: https://www.mono-project.com/download/stable/#download-lin
"
oh. ok.
--

turns out the mono-complete version I installed was not the right one and thus didn't include msbuild. oops. also I'm going to make another commit because I feel afraid something's going to explode now.
--

// Can potentially use musplaying to jump around the music playtime or check if it's done / etc

// Could potentially hack together my own player select menu in-game
// with a mix of Strife convos and the PlayerClasses global array.

--

Another potentially risky workaround if I really *realy* want the follower to carry across maps: Use the custom playerpawns I'm using to add the extra functions responsible for spawning the follower. And change the PlayerInfo to point to that class for the remainder of the game.

Probably not _polite_ to do that though, there is a chance of it breaking things, and David might be cross if it does so. But if it doesn't break, nobody would notice...
--

One minor downside is that Spawn uses global offsets, not relative (in contrast to A_SpawnItemEx), so we can’t spawn CacoBaby 64 units in front of CacoDaddy. But that’s not a problem, since we can spawn it and then immediately move it using Warp (a ZScript internal version of the A_Warp function):